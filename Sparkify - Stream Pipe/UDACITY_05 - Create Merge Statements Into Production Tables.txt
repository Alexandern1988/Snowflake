
// Create merge statements, make sure there are no missing data in any way

// Dim Users
CREATE OR REPLACE TASK UDACITY.STAGING.DIM_USERS_DATA_TASK
    WAREHOUSE = UDACITY_WH
    SCHEDULE = '1 MINUTE'
    WHEN SYSTEM$STREAM_HAS_DATA('DIM_USERS_STREAM')
AS
MERGE INTO UDACITY.PRODUCTION.DIM_USERS T
USING (
    SELECT LD.USER_ID,
           LD.FIRST_NAME,
           LD.LAST_NAME,
           LD.GENDER,
           LD.LEVEL,
           LD.METADATA$ACTION,
           LD.METADATA$ISUPDATE
        FROM UDACITY.STAGING.DIM_USERS_STREAM LD
    ) S
ON T.USER_ID = S.USER_ID
// Delete condition
WHEN MATCHED AND S.METADATA$ACTION   = 'DELETE' 
             AND S.METADATA$ISUPDATE = 'FALSE' THEN DELETE
// Update condition
WHEN MATCHED AND S.METADATA$ACTION   = 'INSERT'
             AND S.METADATA$ISUPDATE = 'TRUE'  THEN UPDATE SET
             T.USER_ID     = S.USER_ID, 
             T.FIRST_NAME  = S.FIRST_NAME, 
             T.LAST_NAME   = S.LAST_NAME, 
             T.GENDER      = S.GENDER, 
             T.LEVEL       = S.LEVEL
// Insert condition
WHEN NOT MATCHED AND S.METADATA$ACTION = 'INSERT'
                 THEN INSERT (T.USER_ID, T.FIRST_NAME, T.LAST_NAME, T.GENDER, T.LEVEL)
                      VALUES (S.USER_ID, S.FIRST_NAME, S.LAST_NAME, S.GENDER, S.LEVEL);
                      
ALTER TASK UDACITY.STAGING.DIM_USERS_DATA_TASK RESUME;
  
 
// Dim Time
CREATE OR REPLACE TASK UDACITY.STAGING.DIM_TIME_DATA_TASK
    WAREHOUSE = UDACITY_WH
    SCHEDULE = '1 MINUTE'
    WHEN SYSTEM$STREAM_HAS_DATA('DIM_TIME_STREAM')
AS
MERGE INTO UDACITY.PRODUCTION.DIM_TIME T
USING (
    SELECT to_timestamp(LC.TS)                  AS START_TIME, 
           DATE_PART(HOUR, to_timestamp(LC.TS)) AS HOUR, 
           DATE_PART(DAY,  to_timestamp(LC.TS)) AS DAY, 
           DATE_PART(WEEK, to_timestamp(LC.TS)) AS WEEK,
           DATE_PART(MONTH,to_timestamp(LC.TS)) AS MONTH, 
           DATE_PART(YEAR, to_timestamp(LC.TS)) AS YEAR, 
           DATE_PART(DAYOFWEEK,to_timestamp(LC.TS)) AS WEEKDAY, 
           LC.METADATA$ACTION, 
           LC.METADATA$ISUPDATE
    FROM UDACITY.STAGING.DIM_TIME_STREAM LC
    ) S
ON T.START_TIME = S.START_TIME   
// Delete condition
WHEN MATCHED AND S.METADATA$ACTION   = 'DELETE' 
             AND S.METADATA$ISUPDATE = 'FALSE' THEN DELETE
// Update condition
WHEN MATCHED AND S.METADATA$ACTION   = 'INSERT'
             AND S.METADATA$ISUPDATE = 'TRUE'  THEN UPDATE SET
             T.START_TIME  = S.START_TIME,     
             T.HOUR        = S.HOUR,           
             T.DAY         = S.DAY,                  
             T.WEEK        = S.WEEK,                 
             T.MONTH       = S.MONTH,                
             T.YEAR        = S.YEAR,                 
             T.WEEKDAY     = S.WEEKDAY                  
WHEN NOT MATCHED AND S.METADATA$ACTION = 'INSERT' 
                 THEN INSERT (T.START_TIME, T.HOUR, T.DAY, T.WEEK, T.MONTH, T.YEAR ,T.WEEKDAY)
                      VALUES (S.START_TIME, S.HOUR, S.DAY, S.WEEK, S.MONTH, S.YEAR, S.WEEKDAY);


ALTER TASK UDACITY.STAGING.DIM_TIME_DATA_TASK RESUME;    
    
                    
// Dim Songs
CREATE OR REPLACE TASK UDACITY.STAGING.DIM_SONGS_DATA_TASK
    WAREHOUSE = UDACITY_WH
    SCHEDULE = '1 MINUTE'
    WHEN SYSTEM$STREAM_HAS_DATA('DIM_SONGS_STREAM')
AS
MERGE INTO UDACITY.PRODUCTION.DIM_SONGS T
USING (
    SELECT SC.SONG_ID, 
           SC.TITLE, 
           SC.ARTIST_ID, 
           SC.YEAR, 
           SC.DURATION, 
           SC.METADATA$ACTION, 
           SC.METADATA$ISUPDATE
        FROM UDACITY.STAGING.DIM_SONGS_STREAM SC  
    ) S 
ON T.SONG_ID = S.SONG_ID
// Delete condition
WHEN MATCHED AND S.METADATA$ACTION   = 'DELETE' 
             AND S.METADATA$ISUPDATE = 'FALSE' THEN DELETE
// Update condition
WHEN MATCHED AND S.METADATA$ACTION   = 'INSERT'
             AND S.METADATA$ISUPDATE = 'TRUE'  THEN UPDATE SET
             T.SONG_ID    = S.SONG_ID,           
             T.TITLE      = S.TITLE,          
             T.ARTIST_ID  = S.ARTIST_ID,              
             T.YEAR       = S.YEAR,          
             T.DURATION   = S.DURATION                                
WHEN NOT MATCHED AND S.METADATA$ACTION = 'INSERT' 
                 THEN INSERT (T.SONG_ID, T.TITLE, T.ARTIST_ID, T.YEAR, T.DURATION)
                      VALUES (S.SONG_ID, S.TITLE, S.ARTIST_ID, S.YEAR, S.DURATION);


ALTER TASK UDACITY.STAGING.DIM_SONGS_DATA_TASK RESUME;
    
    
// Dim Artists
CREATE OR REPLACE TASK UDACITY.STAGING.DIM_ARTISTS_DATA_TASK
    WAREHOUSE = UDACITY_WH
    SCHEDULE = '1 MINUTE'
    WHEN SYSTEM$STREAM_HAS_DATA('DIM_ARTISTS_STREAM')
AS
MERGE INTO UDACITY.PRODUCTION.DIM_ARTISTS T
USING (
    SELECT SC.ARTIST_ID, 
           SC.ARTIST_NAME, 
           SC.ARTIST_LOCATION  AS LOCATION, 
           SC.ARTIST_LONGITUDE AS LONGITUDE, 
           SC.ARTIST_LATITUDE  AS LATITUDE,
           SC.METADATA$ACTION, 
           SC.METADATA$ISUPDATE
    FROM UDACITY.STAGING.DIM_ARTISTS_STREAM SC
    ) S
ON T.ARTIST_ID = S.ARTIST_ID
// Delete condition
WHEN MATCHED AND S.METADATA$ACTION   = 'DELETE' 
             AND S.METADATA$ISUPDATE = 'FALSE' THEN DELETE
// Update condition
WHEN MATCHED AND S.METADATA$ACTION   = 'INSERT'
             AND S.METADATA$ISUPDATE = 'TRUE'  THEN UPDATE SET
             T.ARTIST_ID    = S.ARTIST_ID,           
             T.ARTIST_NAME  = S.ARTIST_NAME,          
             T.LOCATION     = S.LOCATION,              
             T.LONGITUDE    = S.LONGITUDE,          
             T.LATITUDE     = S.LATITUDE                                
WHEN NOT MATCHED AND S.METADATA$ACTION = 'INSERT' 
                 THEN INSERT (T.ARTIST_ID, T.ARTIST_NAME, T.LOCATION, T.LONGITUDE, T.LATITUDE)
                      VALUES (S.ARTIST_ID, S.ARTIST_NAME, S.LOCATION, S.LONGITUDE, S.LATITUDE); 
                      
                      
ALTER TASK UDACITY.STAGING.DIM_ARTISTS_DATA_TASK RESUME;
    
    
 
CREATE OR REPLACE TASK UDACITY.STAGING.FACT_SONGPLAYS_DATA_TASK
    WAREHOUSE = UDACITY_WH
    SCHEDULE = '1 MINUTE'
    WHEN SYSTEM$STREAM_HAS_DATA('LD_SONGPLAYS_STREAM') AND SYSTEM$STREAM_HAS_DATA('SD_SONGPLAYS_STREAM')
AS 
MERGE INTO UDACITY.PRODUCTION.FACT_SONGPLAYS T
USING (
    SELECT ROW_NUMBER() OVER (ORDER BY LD.USER_ID, LD.SESSION_ID) + (select case when max(songplay_id) is null then 0 else max(songplay_id) end from udacity.production.fact_songplays) AS SONGPLAY_ID,
           LD.USER_ID,
           LD.LEVEL,
           LD.SESSION_ID,
           LD.LOCATION,
           LD.USER_AGENT,
           LD.TS AS START_TIME,
           SD.SONG_ID,
           SD.ARTIST_ID,
           LD.METADATA$ACTION   AS LOG_METADATA$ACTION, 
           LD.METADATA$ISUPDATE AS LOG_METADATA$ISUPDATE,
           SD.METADATA$ACTION   AS SONG_METADATA$ACTION, 
           SD.METADATA$ISUPDATE AS SONG_METADATA$ISUPDATE
    FROM UDACITY.STAGING.LD_SONGPLAYS_STREAM LD JOIN UDACITY.STAGING.SD_SONGPLAYS_STREAM SD
    ON LD.SONG = SD.TITLE AND LD.ARTIST = SD.ARTIST_NAME
) S
ON S.SONGPLAY_ID = T.SONGPLAY_ID 
WHEN MATCHED AND S.LOG_METADATA$ACTION   = 'DELETE' AND SONG_METADATA$ACTION   = 'DELETE'
             AND S.LOG_METADATA$ISUPDATE = 'FALSE'  AND SONG_METADATA$ISUPDATE = 'FALSE'  THEN DELETE
// Update condition
WHEN MATCHED AND S.LOG_METADATA$ACTION   = 'INSERT' AND SONG_METADATA$ACTION   = 'INSERT'
             AND S.LOG_METADATA$ISUPDATE = 'TRUE'   AND SONG_METADATA$ISUPDATE = 'TRUE'   THEN UPDATE SET 
             T.SONGPLAY_ID = S.SONGPLAY_ID,
             T.USER_ID     = S.USER_ID,           
             T.LEVEL       = S.LEVEL,          
             T.SESSION_ID  = S.SESSION_ID,              
             T.LOCATION    = S.LOCATION,          
             T.USER_AGENT  = S.USER_AGENT,
             T.START_TIME  = S.START_TIME,
             T.SONG_ID     = S.SONG_ID,
             T.ARTIST_ID   = S.ARTIST_ID
WHEN NOT MATCHED AND S.LOG_METADATA$ACTION = 'INSERT' AND S.SONG_METADATA$ACTION = 'INSERT'
                 THEN INSERT (T.SONGPLAY_ID, T.USER_ID, T.LEVEL, T.SESSION_ID, T.LOCATION, T.USER_AGENT, T.START_TIME, T.SONG_ID, T.ARTIST_ID)
                      VALUES (S.SONGPLAY_ID, S.USER_ID, S.LEVEL, S.SESSION_ID, S.LOCATION, S.USER_AGENT, S.START_TIME, S.SONG_ID, S.ARTIST_ID);
                      


ALTER TASK UDACITY.STAGING.FACT_SONGPLAYS_DATA_TASK RESUME;                      
    

SHOW TASKS;
